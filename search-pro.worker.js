const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":22,\"nextId\":22,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2@0\",\"3\":\"2@1\",\"4\":\"3\",\"5\":\"3#prog1-mandelbort-threads\",\"6\":\"3#环境配置\",\"7\":\"3#任务分析\",\"8\":\"3#任务实现\",\"9\":\"3@0\",\"10\":\"3@1\",\"11\":\"4\",\"12\":\"4#题目引入\",\"13\":\"4#题目分析\",\"14\":\"4#斯特林公式\",\"15\":\"4#代码实现\",\"16\":\"4#总结\",\"17\":\"4@0\",\"18\":\"4@1\",\"19\":\"5\",\"20\":\"6\",\"21\":\"7\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,8],\"1\":[2],\"2\":[null,null,1],\"3\":[null,null,2],\"4\":[3],\"5\":[3],\"6\":[1,38],\"7\":[1,46],\"8\":[1,51],\"9\":[null,null,2],\"10\":[null,null,3],\"11\":[2],\"12\":[1,23],\"13\":[1,52],\"14\":[1,45],\"15\":[1,33],\"16\":[1,1],\"17\":[null,null,1],\"18\":[null,null,2],\"19\":[1,3],\"20\":[1],\"21\":[1]},\"averageFieldLength\":[1.4233511586452763,22.391176470588235,1.1136363636363635],\"storedFields\":{\"0\":{\"h\":\"个人介绍\",\"t\":[\"计算机大二本科小白，\",\"主攻CV/NLP等AI方向，\",\"同时对分布式开发、并行运算感兴趣，\",\"算法还是0基础新人，\",\"路漫漫其修远兮。\"]},\"1\":{\"h\":\"CS149_Course\"},\"2\":{\"c\":[\"CS149\"]},\"3\":{\"c\":[\"公开课\",\"并行计算\"]},\"4\":{\"h\":\"CS149 Lab Assignment1\"},\"5\":{\"h\":\"Prog1_mandelbort_threads\"},\"6\":{\"h\":\"环境配置\",\"t\":[\"本人使用OS为Ubuntu 22.04, 还是建议使用Linux系统做Lab, 很多环境配置会方便一些.\",\"CS149_Asst1并不需要额外配置运行环境, 下载解压一下编译环境就好啦! 下载包:\",\" wget https://github.com/ispc/ispc/releases/download/v1.21.0/ispc-v1.21.0-linux.tar.gz\",\"解压包:\",\" tar -xvf ispc-v1.21.0-linux.tar.gz\",\"配置环境路径:\",\" export PATH=$PATH:${HOME}/Downloads/ispc-v1.21.0-linux/bin\",\"环境配置完成后就可以clone repo到本地来开始lab了:\",\" git clone https://github.com/stanford-cs149/asst1.git\"]},\"7\":{\"h\":\"任务分析\",\"t\":[\"Pro1的内容主要是为了让学生了解std::thread的并行机制和\\\"多线程不一定高效率\\\"的并发事实, 所以难度并不算大~~(这是我的事后诸葛亮)~~, 整体框架已经在源码中基本完成了.完成后可以通过make + ./mandelbort --<args>检验正确与否.\",\"task :\",\"创建线程0和线程1, 分别计算图像的上下两个部分, 即将图像的不同空间交给不同线程计算, 这被称为空间分解(spatial decomposition).\",\"扩展代码使其能够使用2, 3, 4, 5, 6, 7, 8个线程, 进行空间分解, 生成加速图, 假设加速是否与线程数线性相关并加以验证.\",\"在workerThreadStart()的开头和结尾插入计时代码, 验证并解释task2中提出的猜想.\",\"修改一开始的线程分配方式, 实现将两个图片都拉到8线程时7-8倍加速比的效果, 找到适应任何线程数的泛型分配方式(不需要线程之间进行响应和同步), 报告最后得出的8线程加速比.\",\"使用16个线程运行改进后代码, 回答性能是否明显高于8线程并解释原因.\",\"事实上task中给的提示还是比较明显的, 在task1中解释了空间分解的概念, 那么通过对图片本身的上下多份分割,就可以解决这个问题,要注意分割的时候会不会漏行.\"]},\"8\":{\"h\":\"任务实现\",\"t\":[\"我们将一开始就对任务给出多线程的解决方式, 并在后续针对数据结果决定是否要进行优化.\",\"首先我们可以根据阅读mandelbrotSerial.cpp中的源码, 得到mandelbrotSerial()函数事实上是用来计算Mandelbrot图像的, 可以简单分析一下mandelbrotSerial()函数的各个参数:\",\" void mandelbrotSerial( float x0, float y0, float x1, float y1, // 复平面左上和右下两个点坐标 int width, int height, // 图像宽度和高度 int startRow, int numRows, // 开始行和总计算行数 int maxIterations, // 最大迭代次数 int output[]); // 每个点的迭代次数\",\"不难发现只要我们给出startRow, numRows, 其余保持图像默认参数, 就可以完成计算了. 所以可以给出函数workerThreadStart(WorkerArgs * const args)的代码:\",\" size_t rows = args -> height / args -> numThreads; // 确定要计算的行数 if (args -> height % args -> numThreads) { // 如果该遇到整除要加一行避免遗漏 rows++; } size_t startRow = args -> threadId * rows; // 确定开始行 // 如果已经到最后部分不够切分, 直接处理最后部分 rows = rows > args -> height - startRow ? args -> height - startRow : rows; // 调用mandelbrotSerial mandelbrotSerial(args -> x0, args -> y0, args -> x1, args -> y1, args -> width, args -> height, startRow, rows, args -> maxIterations, args -> output);\"]},\"9\":{\"c\":[\"CS149_Lab\"]},\"10\":{\"c\":[\"公开课\",\"并行计算\",\"Lab\"]},\"11\":{\"h\":\"阶乘的位数估算--数学在计算机算法研究中的作用\"},\"12\":{\"h\":\"题目引入\",\"t\":[\"算法与数据结构实验题 1.10 单身狗进化 这一天晚上，弯通又做梦了，并且梦到了一个帅气的男孩纸！这个男孩给了弯通一个数字 n。男孩离开前告诉弯通，n!（n 的阶乘）的位数就是距离弯通脱单的天数。矜（ji）持（ke）的弯通想知道自己还有多久能脱单，快写个程序帮助他！ 输入: 输入第一行为一个正整数 n（1<=n<=25000）。 输出: n阶乘的位数\"]},\"13\":{\"h\":\"题目分析\",\"t\":[\"这道题看上去还挺有意思的很符合大学生的心理状态, 实际上就是要求阶乘的位数倒也没有拐弯抹角. 但是我们都知道, 要是用递归或者循环写阶乘, 这将是一件极为恐怖的事情. 在数据存储(空间复杂度)&计算用时(时间复杂度)上的开销, 将成为任何一台机器的噩梦, 更不可能过测试了. 举个栗子:\",\" int n; long long ans = 1; std::cin >> n; for (int i = 1; i < MAX; i++) ans *= i; std::cout << ans;\",\"大家可以简单跑一下这个程序, 然后就会发现, 在n = 27的时候, 就已经溢出了, 完全无法满足题目要求. 这就是第一种错误的可能, 忘记了估计数据规模, 随便算算就存爆了.\",\"还有一种可能, 就是采用高精度的算法, 将阶乘结果用表存储, 每个内存存有限位数据, 在乘法时做类似竖式乘法的高精度运算.\",\"这种方式能不能过这个题我没有试过因为我懒, 但是一般来说高精度阶乘的时间复杂度是O(n2)\",\"程序代码的复杂度和 n = 25000 所要存储的数据规模, 也会是比较大的开销.\",\"下文将介绍一种用数学方法巧妙估算阶乘结果规模的方式.\"]},\"14\":{\"h\":\"斯特林公式\",\"t\":[\"n!≈2πn​(en​)n\",\"这个公式以詹姆斯·斯特林的名字命名，虽然亚伯拉罕·棣美弗早于斯特林提出了一个类似的公式，但结果较不精确. 当n很大的时候，n阶乘的计算量十分大，所以斯特林公式十分好用，而且，即使在n很小的时候，斯特林公式的取值已经十分准确.\",\"可以通过计算对比来估计一下斯特林公式算出结果, 和阶乘计算结果的误差程度.\",\"我们可以看到, 随着n的增大, 斯特林公式估算的误差已经降到了十万分之一以下, 这对估算阶乘的规模来说是完全可以接受的误差.\",\"通过斯特林公式我们可以简单估算阶乘的位数, 我们知道对于一个n进制数x, 都可以对其取$ [\\\\log_{n}x] + 1 $来得到这个n进制数的位数, 我们将进一步推导用斯特林公式估算阶乘位数N的公式.\",\"N=[log10​[2πn​(en​)n]]+1\",\"其中内层中括号标记运算顺序, 外层中括号意为高斯取整(即向下取整).\",\"N=[21​log10​(2πn)+nlog10​(en​)]+1\",\"通过代入n, 即可轻松求得n!的位数, 时间复杂度是梦寐以求的O(1), 即常数时间复杂度.\"]},\"15\":{\"h\":\"代码实现\",\"t\":[\"代码实现没什么好说的, 套公式罢了, 由于我之前已经测试过最大数据规模, 所以ans也是为了省事儿用的int偷懒是可耻的\",\" #include <stdio.h> #include <math.h> #define PI 3.141592654 #define E 2.71828182846 int pos(int n) { int s = 1; if(n > 3) s = log10(2*PI*n) / 2 + n * log10(n/E) + 1; return s; } int main() { int num, ans; scanf(\\\"%d\\\", &num); ans = pos(num); printf(\\\"%d\\\", ans); }\"]},\"16\":{\"h\":\"总结\",\"t\":[\"数即一切\"]},\"17\":{\"c\":[\"数据结构与算法\"]},\"18\":{\"c\":[\"算法\",\"数学\"]},\"19\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"20\":{\"h\":\"\"},\"21\":{\"h\":\"Posts\"}},\"dirtCount\":0,\"index\":[[\"数学\",{\"2\":{\"18\":1}}],[\"数学在计算机算法研究中的作用\",{\"0\":{\"11\":1}}],[\"数据结构与算法\",{\"2\":{\"17\":1}}],[\"数即一切\",{\"1\":{\"16\":1}}],[\"总结\",{\"0\":{\"16\":1}}],[\"由于我之前已经测试过最大数据规模\",{\"1\":{\"15\":1}}],[\"套公式罢了\",{\"1\":{\"15\":1}}],[\"代码实现没什么好说的\",{\"1\":{\"15\":1}}],[\"代码实现\",{\"0\":{\"15\":1}}],[\"通过代入n\",{\"1\":{\"14\":1}}],[\"通过斯特林公式我们可以简单估算阶乘的位数\",{\"1\":{\"14\":1}}],[\"外层中括号意为高斯取整\",{\"1\":{\"14\":1}}],[\"其中内层中括号标记运算顺序\",{\"1\":{\"14\":1}}],[\"其余保持图像默认参数\",{\"1\":{\"8\":1}}],[\"都可以对其取$\",{\"1\":{\"14\":1}}],[\"随着n的增大\",{\"1\":{\"14\":1}}],[\"随便算算就存爆了\",{\"1\":{\"13\":1}}],[\"我们将进一步推导用斯特林公式估算阶乘位数n的公式\",{\"1\":{\"14\":1}}],[\"我们将一开始就对任务给出多线程的解决方式\",{\"1\":{\"8\":1}}],[\"我们知道对于一个n进制数x\",{\"1\":{\"14\":1}}],[\"我们可以看到\",{\"1\":{\"14\":1}}],[\"和阶乘计算结果的误差程度\",{\"1\":{\"14\":1}}],[\"可以通过计算对比来估计一下斯特林公式算出结果\",{\"1\":{\"14\":1}}],[\"可以简单分析一下mandelbrotserial\",{\"1\":{\"8\":1}}],[\"即常数时间复杂度\",{\"1\":{\"14\":1}}],[\"即可轻松求得n\",{\"1\":{\"14\":1}}],[\"即向下取整\",{\"1\":{\"14\":1}}],[\"即使在n很小的时候\",{\"1\":{\"14\":1}}],[\"即将图像的不同空间交给不同线程计算\",{\"1\":{\"7\":1}}],[\"而且\",{\"1\":{\"14\":1}}],[\"当n很大的时候\",{\"1\":{\"14\":1}}],[\"但结果较不精确\",{\"1\":{\"14\":1}}],[\"但是一般来说高精度阶乘的时间复杂度是o\",{\"1\":{\"13\":1}}],[\"但是我们都知道\",{\"1\":{\"13\":1}}],[\"棣美弗早于斯特林提出了一个类似的公式\",{\"1\":{\"14\":1}}],[\"虽然亚伯拉罕\",{\"1\":{\"14\":1}}],[\"斯特林的名字命名\",{\"1\":{\"14\":1}}],[\"斯特林公式估算的误差已经降到了十万分之一以下\",{\"1\":{\"14\":1}}],[\"斯特林公式的取值已经十分准确\",{\"1\":{\"14\":1}}],[\"斯特林公式\",{\"0\":{\"14\":1}}],[\"e\",{\"1\":{\"15\":2}}],[\"en​\",{\"1\":{\"14\":3}}],[\"export\",{\"1\":{\"6\":1}}],[\"≈2πn​\",{\"1\":{\"14\":1}}],[\"下文将介绍一种用数学方法巧妙估算阶乘结果规模的方式\",{\"1\":{\"13\":1}}],[\"下载包\",{\"1\":{\"6\":1}}],[\"下载解压一下编译环境就好啦\",{\"1\":{\"6\":1}}],[\"也会是比较大的开销\",{\"1\":{\"13\":1}}],[\"所要存储的数据规模\",{\"1\":{\"13\":1}}],[\"所以ans也是为了省事儿用的int偷懒是可耻的\",{\"1\":{\"15\":1}}],[\"所以斯特林公式十分好用\",{\"1\":{\"14\":1}}],[\"所以可以给出函数workerthreadstart\",{\"1\":{\"8\":1}}],[\"所以难度并不算大~~\",{\"1\":{\"7\":1}}],[\"程序代码的复杂度和\",{\"1\":{\"13\":1}}],[\"每个内存存有限位数据\",{\"1\":{\"13\":1}}],[\"每个点的迭代次数\",{\"1\":{\"8\":1}}],[\"将阶乘结果用表存储\",{\"1\":{\"13\":1}}],[\"将成为任何一台机器的噩梦\",{\"1\":{\"13\":1}}],[\"还有一种可能\",{\"1\":{\"13\":1}}],[\"还是建议使用linux系统做lab\",{\"1\":{\"6\":1}}],[\"忘记了估计数据规模\",{\"1\":{\"13\":1}}],[\"完全无法满足题目要求\",{\"1\":{\"13\":1}}],[\"完成后可以通过make\",{\"1\":{\"7\":1}}],[\"就是采用高精度的算法\",{\"1\":{\"13\":1}}],[\"就已经溢出了\",{\"1\":{\"13\":1}}],[\"就可以完成计算了\",{\"1\":{\"8\":1}}],[\"就可以解决这个问题\",{\"1\":{\"7\":1}}],[\"然后就会发现\",{\"1\":{\"13\":1}}],[\"大家可以简单跑一下这个程序\",{\"1\":{\"13\":1}}],[\"<math\",{\"1\":{\"15\":1}}],[\"<stdio\",{\"1\":{\"15\":1}}],[\"<<\",{\"1\":{\"13\":1}}],[\"<\",{\"1\":{\"13\":1}}],[\"<args>检验正确与否\",{\"1\":{\"7\":1}}],[\"found\",{\"1\":{\"19\":1}}],[\"for\",{\"1\":{\"13\":1}}],[\"float\",{\"1\":{\"8\":4}}],[\"举个栗子\",{\"1\":{\"13\":1}}],[\"更不可能过测试了\",{\"1\":{\"13\":1}}],[\"上的开销\",{\"1\":{\"13\":1}}],[\"时间复杂度是梦寐以求的o\",{\"1\":{\"14\":1}}],[\"时间复杂度\",{\"1\":{\"13\":1}}],[\"计算用时\",{\"1\":{\"13\":1}}],[\"计算机大二本科小白\",{\"1\":{\"0\":1}}],[\"空间复杂度\",{\"1\":{\"13\":1}}],[\"要是用递归或者循环写阶乘\",{\"1\":{\"13\":1}}],[\"要注意分割的时候会不会漏行\",{\"1\":{\"7\":1}}],[\"实际上就是要求阶乘的位数倒也没有拐弯抹角\",{\"1\":{\"13\":1}}],[\"实现将两个图片都拉到8线程时7\",{\"1\":{\"7\":1}}],[\"题目分析\",{\"0\":{\"13\":1}}],[\"题目引入\",{\"0\":{\"12\":1}}],[\"输出\",{\"1\":{\"12\":1}}],[\"输入第一行为一个正整数\",{\"1\":{\"12\":1}}],[\"输入\",{\"1\":{\"12\":1}}],[\"快写个程序帮助他\",{\"1\":{\"12\":1}}],[\"ke\",{\"1\":{\"12\":1}}],[\"持\",{\"1\":{\"12\":1}}],[\"ji\",{\"1\":{\"12\":1}}],[\"矜\",{\"1\":{\"12\":1}}],[\"男孩离开前告诉弯通\",{\"1\":{\"12\":1}}],[\"弯通又做梦了\",{\"1\":{\"12\":1}}],[\"单身狗进化\",{\"1\":{\"12\":1}}],[\"141592654\",{\"1\":{\"15\":1}}],[\"1<=n<=25000\",{\"1\":{\"12\":1}}],[\"10\",{\"1\":{\"12\":1}}],[\"1\",{\"1\":{\"12\":1,\"13\":2,\"14\":2,\"15\":2}}],[\"算法\",{\"2\":{\"18\":1}}],[\"算法与数据结构实验题\",{\"1\":{\"12\":1}}],[\"算法还是0基础新人\",{\"1\":{\"0\":1}}],[\"阶乘的位数估算\",{\"0\":{\"11\":1}}],[\"调用mandelbrotserial\",{\"1\":{\"8\":1}}],[\"直接处理最后部分\",{\"1\":{\"8\":1}}],[\"如果已经到最后部分不够切分\",{\"1\":{\"8\":1}}],[\"如果该遇到整除要加一行避免遗漏\",{\"1\":{\"8\":1}}],[\"确定开始行\",{\"1\":{\"8\":1}}],[\"确定要计算的行数\",{\"1\":{\"8\":1}}],[\">>\",{\"1\":{\"13\":1}}],[\">\",{\"1\":{\"8\":16,\"15\":1}}],[\"=\",{\"1\":{\"8\":3,\"13\":5,\"15\":3}}],[\"rows++\",{\"1\":{\"8\":1}}],[\"rows\",{\"1\":{\"8\":6}}],[\"return\",{\"1\":{\"15\":1}}],[\"repo到本地来开始lab了\",{\"1\":{\"6\":1}}],[\"releases\",{\"1\":{\"6\":1}}],[\"ans\",{\"1\":{\"13\":3,\"15\":3}}],[\"args\",{\"1\":{\"8\":16}}],[\"asst1\",{\"1\":{\"6\":1}}],[\"asst1并不需要额外配置运行环境\",{\"1\":{\"6\":1}}],[\"assignment1\",{\"0\":{\"4\":1}}],[\"不难发现只要我们给出startrow\",{\"1\":{\"8\":1}}],[\"不需要线程之间进行响应和同步\",{\"1\":{\"7\":1}}],[\"output\",{\"1\":{\"8\":2}}],[\"最大迭代次数\",{\"1\":{\"8\":1}}],[\"main\",{\"1\":{\"15\":1}}],[\"max\",{\"1\":{\"13\":1}}],[\"maxiterations\",{\"1\":{\"8\":2}}],[\"mandelbrotserial\",{\"1\":{\"8\":2}}],[\"mandelbort\",{\"0\":{\"5\":1},\"1\":{\"7\":1}}],[\"开始行和总计算行数\",{\"1\":{\"8\":1}}],[\"not\",{\"1\":{\"19\":1}}],[\"n=\",{\"1\":{\"14\":2}}],[\"n阶乘的计算量十分大\",{\"1\":{\"14\":1}}],[\"n阶乘的位数\",{\"1\":{\"12\":1}}],[\"n2\",{\"1\":{\"13\":1}}],[\"n\",{\"1\":{\"12\":4,\"13\":3,\"14\":4,\"15\":5}}],[\"num\",{\"1\":{\"15\":3}}],[\"numthreads\",{\"1\":{\"8\":2}}],[\"numrows\",{\"1\":{\"8\":2}}],[\"nlp等ai方向\",{\"1\":{\"0\":1}}],[\"图像宽度和高度\",{\"1\":{\"8\":1}}],[\"workerargs\",{\"1\":{\"8\":1}}],[\"width\",{\"1\":{\"8\":2}}],[\"wget\",{\"1\":{\"6\":1}}],[\"include\",{\"1\":{\"15\":2}}],[\"int\",{\"1\":{\"8\":6,\"13\":2,\"15\":5}}],[\"i++\",{\"1\":{\"13\":1}}],[\"i\",{\"1\":{\"13\":3}}],[\"if\",{\"1\":{\"8\":1,\"15\":1}}],[\"ispc\",{\"1\":{\"6\":5}}],[\"复平面左上和右下两个点坐标\",{\"1\":{\"8\":1}}],[\"y1\",{\"1\":{\"8\":2}}],[\"y0\",{\"1\":{\"8\":2}}],[\"x\",{\"1\":{\"14\":1}}],[\"x1\",{\"1\":{\"8\":2}}],[\"x0\",{\"1\":{\"8\":2}}],[\"xvf\",{\"1\":{\"6\":1}}],[\"void\",{\"1\":{\"8\":1}}],[\"v1\",{\"1\":{\"6\":4}}],[\"函数的各个参数\",{\"1\":{\"8\":1}}],[\"函数事实上是用来计算mandelbrot图像的\",{\"1\":{\"8\":1}}],[\"得到mandelbrotserial\",{\"1\":{\"8\":1}}],[\"首先我们可以根据阅读mandelbrotserial\",{\"1\":{\"8\":1}}],[\"并且梦到了一个帅气的男孩纸\",{\"1\":{\"12\":1}}],[\"并在后续针对数据结果决定是否要进行优化\",{\"1\":{\"8\":1}}],[\"并行计算\",{\"2\":{\"3\":1,\"10\":1}}],[\"并行运算感兴趣\",{\"1\":{\"0\":1}}],[\"任务实现\",{\"0\":{\"8\":1}}],[\"任务分析\",{\"0\":{\"7\":1}}],[\"那么通过对图片本身的上下多份分割\",{\"1\":{\"7\":1}}],[\"在乘法时做类似竖式乘法的高精度运算\",{\"1\":{\"13\":1}}],[\"在n\",{\"1\":{\"13\":1}}],[\"在数据存储\",{\"1\":{\"13\":1}}],[\"在task1中解释了空间分解的概念\",{\"1\":{\"7\":1}}],[\"在workerthreadstart\",{\"1\":{\"7\":1}}],[\"事实上task中给的提示还是比较明显的\",{\"1\":{\"7\":1}}],[\"回答性能是否明显高于8线程并解释原因\",{\"1\":{\"7\":1}}],[\"使用16个线程运行改进后代码\",{\"1\":{\"7\":1}}],[\"报告最后得出的8线程加速比\",{\"1\":{\"7\":1}}],[\"找到适应任何线程数的泛型分配方式\",{\"1\":{\"7\":1}}],[\"8倍加速比的效果\",{\"1\":{\"7\":1}}],[\"8个线程\",{\"1\":{\"7\":1}}],[\"修改一开始的线程分配方式\",{\"1\":{\"7\":1}}],[\"验证并解释task2中提出的猜想\",{\"1\":{\"7\":1}}],[\"的位数\",{\"1\":{\"14\":1}}],[\"的位数就是距离弯通脱单的天数\",{\"1\":{\"12\":1}}],[\"的弯通想知道自己还有多久能脱单\",{\"1\":{\"12\":1}}],[\"的阶乘\",{\"1\":{\"12\":1}}],[\"的代码\",{\"1\":{\"8\":1}}],[\"的开头和结尾插入计时代码\",{\"1\":{\"7\":1}}],[\"的并发事实\",{\"1\":{\"7\":1}}],[\"假设加速是否与线程数线性相关并加以验证\",{\"1\":{\"7\":1}}],[\"生成加速图\",{\"1\":{\"7\":1}}],[\"进行空间分解\",{\"1\":{\"7\":1}}],[\"71828182846\",{\"1\":{\"15\":1}}],[\"7\",{\"1\":{\"7\":1}}],[\"6\",{\"1\":{\"7\":1}}],[\"5\",{\"1\":{\"7\":1}}],[\"404\",{\"1\":{\"19\":1}}],[\"4\",{\"1\":{\"7\":1}}],[\"3\",{\"1\":{\"7\":1,\"15\":2}}],[\"扩展代码使其能够使用2\",{\"1\":{\"7\":1}}],[\"d\",{\"1\":{\"15\":2}}],[\"define\",{\"1\":{\"15\":2}}],[\"decomposition\",{\"1\":{\"7\":1}}],[\"downloads\",{\"1\":{\"6\":1}}],[\"download\",{\"1\":{\"6\":1}}],[\"scanf\",{\"1\":{\"15\":1}}],[\"s\",{\"1\":{\"15\":3}}],[\"std\",{\"1\":{\"13\":2}}],[\"startrow\",{\"1\":{\"8\":5}}],[\"stanford\",{\"1\":{\"6\":1}}],[\"size\",{\"1\":{\"8\":2}}],[\"spatial\",{\"1\":{\"7\":1}}],[\"这对估算阶乘的规模来说是完全可以接受的误差\",{\"1\":{\"14\":1}}],[\"这个公式以詹姆斯\",{\"1\":{\"14\":1}}],[\"这个男孩给了弯通一个数字\",{\"1\":{\"12\":1}}],[\"这种方式能不能过这个题我没有试过因为我懒\",{\"1\":{\"13\":1}}],[\"这就是第一种错误的可能\",{\"1\":{\"13\":1}}],[\"这将是一件极为恐怖的事情\",{\"1\":{\"13\":1}}],[\"这道题看上去还挺有意思的很符合大学生的心理状态\",{\"1\":{\"13\":1}}],[\"这一天晚上\",{\"1\":{\"12\":1}}],[\"这被称为空间分解\",{\"1\":{\"7\":1}}],[\"这是我的事后诸葛亮\",{\"1\":{\"7\":1}}],[\"分别计算图像的上下两个部分\",{\"1\":{\"7\":1}}],[\"创建线程0和线程1\",{\"1\":{\"7\":1}}],[\"+nlog10​\",{\"1\":{\"14\":1}}],[\"+1\",{\"1\":{\"14\":2}}],[\"+\",{\"1\":{\"7\":1,\"14\":1,\"15\":2}}],[\"整体框架已经在源码中基本完成了\",{\"1\":{\"7\":1}}],[\"~~\",{\"1\":{\"7\":1}}],[\"多线程不一定高效率\",{\"1\":{\"7\":1}}],[\"bin\",{\"1\":{\"6\":1}}],[\"h>\",{\"1\":{\"15\":2}}],[\"height\",{\"1\":{\"8\":6}}],[\"home\",{\"1\":{\"6\":1}}],[\"https\",{\"1\":{\"6\":2}}],[\"$来得到这个n进制数的位数\",{\"1\":{\"14\":1}}],[\"$\",{\"1\":{\"6\":1}}],[\"printf\",{\"1\":{\"15\":1}}],[\"pro1的内容主要是为了让学生了解std\",{\"1\":{\"7\":1}}],[\"prog1\",{\"0\":{\"5\":1}}],[\"posts\",{\"0\":{\"21\":1}}],[\"pos\",{\"1\":{\"15\":2}}],[\"pi\",{\"1\":{\"15\":2}}],[\"path=$path\",{\"1\":{\"6\":1}}],[\"配置环境路径\",{\"1\":{\"6\":1}}],[\"解压包\",{\"1\":{\"6\":1}}],[\"git\",{\"1\":{\"6\":2}}],[\"github\",{\"1\":{\"6\":2}}],[\"gz\",{\"1\":{\"6\":2}}],[\"t\",{\"1\":{\"8\":2}}],[\"task\",{\"1\":{\"7\":1}}],[\"tar\",{\"1\":{\"6\":3}}],[\"threadid\",{\"1\":{\"8\":1}}],[\"thread的并行机制和\",{\"1\":{\"7\":1}}],[\"threads\",{\"0\":{\"5\":1}}],[\"log10\",{\"1\":{\"15\":2}}],[\"log10​\",{\"1\":{\"14\":1}}],[\"log\",{\"1\":{\"14\":1}}],[\"long\",{\"1\":{\"13\":2}}],[\"linux\",{\"1\":{\"6\":3}}],[\"lab\",{\"0\":{\"4\":1},\"2\":{\"9\":1,\"10\":1}}],[\"0\",{\"1\":{\"6\":4}}],[\"04\",{\"1\":{\"6\":1}}],[\"2\",{\"1\":{\"15\":3}}],[\"2πn\",{\"1\":{\"14\":1}}],[\"2πn​\",{\"1\":{\"14\":1}}],[\"25000\",{\"1\":{\"13\":1}}],[\"27的时候\",{\"1\":{\"13\":1}}],[\"21​log10​\",{\"1\":{\"14\":1}}],[\"21\",{\"1\":{\"6\":4}}],[\"22\",{\"1\":{\"6\":1}}],[\"很多环境配置会方便一些\",{\"1\":{\"6\":1}}],[\"本人使用os为ubuntu\",{\"1\":{\"6\":1}}],[\"环境配置完成后就可以clone\",{\"1\":{\"6\":1}}],[\"环境配置\",{\"0\":{\"6\":1}}],[\"公开课\",{\"2\":{\"3\":1,\"10\":1}}],[\"cin\",{\"1\":{\"13\":1}}],[\"cpp中的源码\",{\"1\":{\"8\":1}}],[\"clone\",{\"1\":{\"6\":1}}],[\"cout\",{\"1\":{\"13\":1}}],[\"course\",{\"0\":{\"1\":1}}],[\"const\",{\"1\":{\"8\":1}}],[\"com\",{\"1\":{\"6\":2}}],[\"cs149\",{\"0\":{\"1\":1,\"4\":1},\"1\":{\"6\":2},\"2\":{\"2\":1,\"9\":1}}],[\"路漫漫其修远兮\",{\"1\":{\"0\":1}}],[\"同时对分布式开发\",{\"1\":{\"0\":1}}],[\"主攻cv\",{\"1\":{\"0\":1}}],[\"个人介绍\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
